# -*- coding: utf-8 -*-
# time:2023/4/3 9:42
# file 迷宫.py
# outhor:czy
# email:1060324818@qq.com



step=0
maze = [
                  "01010101001011001001010110010110100100001000101010",
                  "00001000100000101010010000100000001001100110100101",
                  "01111011010010001000001101001011100011000000010000",
                  "01000000001010100011010000101000001010101011001011",
                  "00011111000000101000010010100010100000101100000000",
                  "11001000110101000010101100011010011010101011110111",
                  "00011011010101001001001010000001000101001110000000",
                  "10100000101000100110101010111110011000010000111010",
                  "00111000001010100001100010000001000101001100001001",
                  "11000110100001110010001001010101010101010001101000",
                  "00010000100100000101001010101110100010101010000101",
                  "11100100101001001000010000010101010100100100010100",
                  "00000010000000101011001111010001100000101010100011",
                  "10101010011100001000011000010110011110110100001000",
                  "10101010100001101010100101000010100000111011101001",
                  "10000000101100010000101100101101001011100000000100",
                  "10101001000000010100100001000100000100011110101001",
                  "00101001010101101001010100011010101101110000110101",
                  "11001010000100001100000010100101000001000111000010",
                  "00001000110000110101101000000100101001001000011101",
                  "10100101000101000000001110110010110101101010100001",
                  "00101000010000110101010000100010001001000100010101",
                  "10100001000110010001000010101001010101011111010010",
                  "00000100101000000110010100101001000001000000000010",
                  "11010000001001110111001001000011101001011011101000",
                  "00000110100010001000100000001000011101000000110011",
                  "10101000101000100010001111100010101001010000001000",
                  "10000010100101001010110000000100101010001011101000",
                  "00111100001000010000000110111000000001000000001011",
                  "10000001100111010111010001000110111010101101111000"]
vis=[[False for i in range(10000)]for i in range(10000)]
dirs=[[1,0],[0,-1],[0,1],[-1,0]]

def ins(x,y):
    return x<30 and x>=0 and y>=0 and y<50


father=[[[1,1,1,1] for i in range(10005)]for i in range(10005)]

def dfs(x,y):
    if x==0 and y == 0:
        return
    else:
        dfs(father[x][y][0],father[x][y][1])
    print(father[x][y][3])

def bfs(x,y):
    q = []
    now = [x,y,0]
    q.append(now)

    father[x][y][0] = 10000
    father[x][y][1] = 10000
    father[x][y][3] = 0

    vis[x][y] = True
    next = []
    while ( not len(q) == 0):
        now = q[0]

        q.pop(0)
        for i in range(4):
            tx = now[0] + dirs[i][0]
            ty = now[1] + dirs[i][1]
            print(tx,ty)
            if(ins(tx,ty)and not vis[tx][ty] and maze[tx][ty]!='1'):
                vis[tx][ty] = True
                next.append(tx)
                next.append(ty)
                next.append(now[2]+1)
                q.append(next)
                print(father[tx][ty][0])
                father[tx][ty][0]=now[0]
                father[tx][ty][1]=now[1]

                if(i==0):
                    father[tx][ty][2]='D'
                elif(i==1):
                    father[tx][ty][2]='L'
                elif(i==2):
                    father[tx][ty][2]='R'
                elif(i==3):
                    father[tx][ty][2]='U'



def main():
    bfs(0,0)
    dfs(29,49)

def classonce():
     n,m = 30,50
     see = set()  # 记录走过的点
     nums = [[int(x) for x  in input()] for _ in range(n)]
     def stop(x,y):
       if x < 0 or y < 0 or x >= 30 or y >= 50 or nums[x][y] == 1 or ((x,y) in see):
         return False
       return True
     def bfs(x,y):
       que = [(x,y,'')]
       while que:
         x,y,z = que.pop(0)
         if stop(x,y):  # x,y没有超界
           see.add((x,y))
           que.append((x+1,y,z + 'D'))  # 按字母顺序，这样最后的出来的是顺序小的
           que.append((x,y-1,z + 'L'))
           que.append((x,y+1,z + 'R'))
           que.append((x-1,y,z + 'U'))
         if x == 29 and y == 49:
           return z
     print(bfs(0, 0))

classonce()